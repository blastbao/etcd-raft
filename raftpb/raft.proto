syntax = "proto2";
package raftpb;

import "gogoproto/gogo.proto";

option (gogoproto.marshaler_all) = true;
option (gogoproto.sizer_all) = true;
option (gogoproto.unmarshaler_all) = true;
option (gogoproto.goproto_getters_all) = false;
option (gogoproto.goproto_enum_prefix_all) = false;
option (gogoproto.goproto_unkeyed_all) = false;
option (gogoproto.goproto_unrecognized_all) = false;
option (gogoproto.goproto_sizecache_all) = false;

enum EntryType {
	EntryNormal       = 0;
	EntryConfChange   = 1; // corresponds to pb.ConfChange
	EntryConfChangeV2 = 2; // corresponds to pb.ConfChangeV2
}

message Entry {
	//期号: 当前的选举轮次
	optional uint64     Term  = 2 [(gogoproto.nullable) = false]; // must be 64-bit aligned for atomic operations
	//标号: 每一条提案都有一个Index，递增，可以理解为ID
	optional uint64     Index = 3 [(gogoproto.nullable) = false]; // must be 64-bit aligned for atomic operations
	//类型: 普通提案 或 配置变更提案
	optional EntryType  Type  = 1 [(gogoproto.nullable) = false];
	//数据
	optional bytes      Data  = 4;
}

message SnapshotMetadata {
	optional ConfState conf_state = 1 [(gogoproto.nullable) = false];
	optional uint64    index      = 2 [(gogoproto.nullable) = false];
	optional uint64    term       = 3 [(gogoproto.nullable) = false];
}

// 服务会不定期地将 `已协商一致的提案(日志)` 打包压缩成一个 `数据快照` 。
// 比如 put(a,1) put(a,2) put(b,3) 会打包成数据快照 a:2;b:3
// 正常情况下，节点启动会从本地读取数据快照，然后在此基础上继续同步提案(日志);
// 同步提案的过程中，如果有异常，则会将先同步 Leader 的最新数据快照给 Follower，然后再此数据快照的基础上，再继续同步提案。
message Snapshot {
	// 被打包压缩的数据，数据格式由具体的应用层提供
	optional bytes            data     = 1;
	// 该份数据对应的 raft 状态机的状态，包括 Nodes、Index、Item
	optional SnapshotMetadata metadata = 2 [(gogoproto.nullable) = false];
}

// For description of different message types, see:
// https://pkg.go.dev/go.etcd.io/raft/v3#hdr-MessageType
enum MessageType {
	MsgHup               = 0;
	MsgBeat              = 1;
	MsgProp              = 2;
	MsgApp               = 3;
	MsgAppResp           = 4;
	MsgVote              = 5;
	MsgVoteResp          = 6;
	MsgSnap              = 7;
	MsgHeartbeat         = 8;
	MsgHeartbeatResp     = 9;
	MsgUnreachable       = 10;
	MsgSnapStatus        = 11;
	MsgCheckQuorum       = 12;
	MsgTransferLeader    = 13;
	MsgTimeoutNow        = 14;
	MsgReadIndex         = 15;
	MsgReadIndexResp     = 16;
	MsgPreVote           = 17;
	MsgPreVoteResp       = 18;
	MsgStorageAppend     = 19;
	MsgStorageAppendResp = 20;
	MsgStorageApply      = 21;
	MsgStorageApplyResp  = 22;
	// NOTE: when adding new message types, remember to update the isLocalMsg and
	// isResponseMsg arrays in raft/util.go and update the corresponding tests in
	// raft/util_test.go.
}

// 字段说明：
//	To, From：分别代表了这个消息的接受者和发送者。
//	Term：这个消息发出时整个集群所处的任期。
//	LogTerm：消息发出者所保存的日志中最后一条的任期号，一般 MsgVote 会用到这个字段。
//	Index：日志索引号。如果当前消息是 MsgVote 的话，代表这个 candidate 最后一条日志的索引号，
//      	 它跟上面的 LogTerm 一起代表这个 candidate 所拥有的最新日志信息，
//	       这样别人就可以比较自己的日志是不是比 candidate 的日志要新，从而决定是否投票。
//	Entries：需要存储的日志。
//	Commit：已经提交的日志的索引值，用来向别人同步日志的提交信息。
//	Snapshot：一般跟MsgSnap合用，用来放置具体的Snapshot值。
//	Reject，RejectHint：代表对方节点拒绝了当前节点的请求( MsgVote/MsgApp/MsgSnap/… )
message Message {
	optional MessageType type        = 1  [(gogoproto.nullable) = false];
	optional uint64      to          = 2  [(gogoproto.nullable) = false];
	optional uint64      from        = 3  [(gogoproto.nullable) = false];
	optional uint64      term        = 4  [(gogoproto.nullable) = false];
	// logTerm is generally used for appending Raft logs to followers. For example,
	// (type=MsgApp,index=100,logTerm=5) means the leader appends entries starting
	// at index=101, and the term of the entry at index 100 is 5.
	// (type=MsgAppResp,reject=true,index=100,logTerm=5) means follower rejects some
	// entries from its leader as it already has an entry with term 5 at index 100.
	// (type=MsgStorageAppendResp,index=100,logTerm=5) means the local node wrote
	// entries up to index=100 in stable storage, and the term of the entry at index
	// 100 was 5. This doesn't always mean that the corresponding MsgStorageAppend
	// message was the one that carried these entries, just that those entries were
	// stable at the time of processing the corresponding MsgStorageAppend.
	optional uint64      logTerm     = 5  [(gogoproto.nullable) = false];
	optional uint64      index       = 6  [(gogoproto.nullable) = false];
	repeated Entry       entries     = 7  [(gogoproto.nullable) = false];
	optional uint64      commit      = 8  [(gogoproto.nullable) = false];
	// (type=MsgStorageAppend,vote=5,term=10) means the local node is voting for
	// peer 5 in term 10. For MsgStorageAppends, the term, vote, and commit fields
	// will either all be set (to facilitate the construction of a HardState) if
	// any of the fields have changed or will all be unset if none of the fields
	// have changed.
	optional uint64      vote        = 13 [(gogoproto.nullable) = false];
	// snapshot is non-nil and non-empty for MsgSnap messages and nil for all other
	// message types. However, peer nodes running older binary versions may send a
	// non-nil, empty value for the snapshot field of non-MsgSnap messages. Code
	// should be prepared to handle such messages.
	optional Snapshot    snapshot    = 9  [(gogoproto.nullable) = true];
	optional bool        reject      = 10 [(gogoproto.nullable) = false];
	optional uint64      rejectHint  = 11 [(gogoproto.nullable) = false];
	optional bytes       context     = 12 [(gogoproto.nullable) = true];
	// responses are populated by a raft node to instruct storage threads on how
	// to respond and who to respond to when the work associated with a message
	// is complete. Populated for MsgStorageAppend and MsgStorageApply messages.
	repeated Message     responses   = 14 [(gogoproto.nullable) = false];
}


// HardState 是写入到 WAL（存储 Entry 的文件）的状态，可以在节点重启时恢复 raft 的状态，它了记录：
//	Term：节点当前所在的 Term 。
//	Vote：节点在竞选期间所投的候选节点 ID 。
//	Commit：当前已经 committed Entry Index 。
message HardState {
	optional uint64 term   = 1 [(gogoproto.nullable) = false];
	optional uint64 vote   = 2 [(gogoproto.nullable) = false];
	optional uint64 commit = 3 [(gogoproto.nullable) = false];
}

// ConfChangeTransition specifies the behavior of a configuration change with
// respect to joint consensus.
enum ConfChangeTransition {
	// Automatically use the simple protocol if possible, otherwise fall back
	// to ConfChangeJointImplicit. Most applications will want to use this.
	ConfChangeTransitionAuto          = 0;
	// Use joint consensus unconditionally, and transition out of them
	// automatically (by proposing a zero configuration change).
	//
	// This option is suitable for applications that want to minimize the time
	// spent in the joint configuration and do not store the joint configuration
	// in the state machine (outside of InitialState).
	ConfChangeTransitionJointImplicit = 1;
	// Use joint consensus and remain in the joint configuration until the
	// application proposes a no-op configuration change. This is suitable for
	// applications that want to explicitly control the transitions, for example
	// to use a custom payload (via the Context field).
	ConfChangeTransitionJointExplicit = 2;
}

message ConfState {
	// The voters in the incoming config. (If the configuration is not joint,
	// then the outgoing config is empty).
	repeated uint64 voters = 1;
	// The learners in the incoming config.
	repeated uint64 learners          = 2;
	// The voters in the outgoing config.
	repeated uint64 voters_outgoing   = 3;
	// The nodes that will become learners when the outgoing config is removed.
	// These nodes are necessarily currently in nodes_joint (or they would have
	// been added to the incoming config right away).
	repeated uint64 learners_next     = 4;
	// If set, the config is joint and Raft will automatically transition into
	// the final config (i.e. remove the outgoing config) when this is safe.
	optional bool   auto_leave        = 5 [(gogoproto.nullable) = false];
}

enum ConfChangeType {
	ConfChangeAddNode        = 0;
	ConfChangeRemoveNode     = 1;
	ConfChangeUpdateNode     = 2;
	ConfChangeAddLearnerNode = 3;
}

message ConfChange {
	optional ConfChangeType  type    = 2 [(gogoproto.nullable) = false];
	optional uint64          node_id = 3 [(gogoproto.nullable) = false, (gogoproto.customname) = "NodeID"];
	optional bytes           context = 4;

	// NB: this is used only by etcd to thread through a unique identifier.
	// Ideally it should really use the Context instead. No counterpart to
	// this field exists in ConfChangeV2.
	optional uint64          id      = 1 [(gogoproto.nullable) = false, (gogoproto.customname) = "ID"];
}

// ConfChangeSingle is an individual configuration change operation. Multiple
// such operations can be carried out atomically via a ConfChangeV2.
message ConfChangeSingle {
	optional ConfChangeType  type    = 1 [(gogoproto.nullable) = false];
	optional uint64          node_id = 2 [(gogoproto.nullable) = false, (gogoproto.customname) = "NodeID"];
}

// ConfChangeV2 messages initiate configuration changes. They support both the
// simple "one at a time" membership change protocol and full Joint Consensus
// allowing for arbitrary changes in membership.
//
// The supplied context is treated as an opaque payload and can be used to
// attach an action on the state machine to the application of the config change
// proposal. Note that contrary to Joint Consensus as outlined in the Raft
// paper[1], configuration changes become active when they are *applied* to the
// state machine (not when they are appended to the log).
//
// The simple protocol can be used whenever only a single change is made.
//
// Non-simple changes require the use of Joint Consensus, for which two
// configuration changes are run. The first configuration change specifies the
// desired changes and transitions the Raft group into the joint configuration,
// in which quorum requires a majority of both the pre-changes and post-changes
// configuration. Joint Consensus avoids entering fragile intermediate
// configurations that could compromise survivability. For example, without the
// use of Joint Consensus and running across three availability zones with a
// replication factor of three, it is not possible to replace a voter without
// entering an intermediate configuration that does not survive the outage of
// one availability zone.
//
// The provided ConfChangeTransition specifies how (and whether) Joint Consensus
// is used, and assigns the task of leaving the joint configuration either to
// Raft or the application. Leaving the joint configuration is accomplished by
// proposing a ConfChangeV2 with only and optionally the Context field
// populated.
//
// For details on Raft membership changes, see:
//
// [1]: https://github.com/ongardie/dissertation/blob/master/online-trim.pdf
message ConfChangeV2 {
	optional ConfChangeTransition transition = 1 [(gogoproto.nullable) = false];
	repeated ConfChangeSingle     changes =    2 [(gogoproto.nullable) = false];
	optional bytes                context =    3;
}
